# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  role: RoleWhereInput
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  canAccessDashboard: Boolean
  canManageApplications: Boolean
  canManageCategories: Boolean
  canManageCapabilities: Boolean
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canSeeOtherPeople: BooleanFilter
  canEditOtherPeople: BooleanFilter
  canManagePeople: BooleanFilter
  canManageRoles: BooleanFilter
  canAccessDashboard: BooleanFilter
  canManageApplications: BooleanFilter
  canManageCategories: BooleanFilter
  canManageCapabilities: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canSeeOtherPeople: OrderDirection
  canEditOtherPeople: OrderDirection
  canManagePeople: OrderDirection
  canManageRoles: OrderDirection
  canAccessDashboard: OrderDirection
  canManageApplications: OrderDirection
  canManageCategories: OrderDirection
  canManageCapabilities: OrderDirection
}

input RoleUpdateInput {
  name: String
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  canAccessDashboard: Boolean
  canManageApplications: Boolean
  canManageCategories: Boolean
  canManageCapabilities: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  canAccessDashboard: Boolean
  canManageApplications: Boolean
  canManageCategories: Boolean
  canManageCapabilities: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Category {
  id: ID!
  name: String
  slug: String
  description: String
  icon: String
  color: String
  createdAt: DateTime
  proprietaryApplications(where: ProprietaryApplicationWhereInput! = {}, orderBy: [ProprietaryApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProprietaryApplicationWhereUniqueInput): [ProprietaryApplication!]
  proprietaryApplicationsCount(where: ProprietaryApplicationWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  icon: StringFilter
  color: StringFilter
  createdAt: DateTimeNullableFilter
  proprietaryApplications: ProprietaryApplicationManyRelationFilter
}

input ProprietaryApplicationManyRelationFilter {
  every: ProprietaryApplicationWhereInput
  some: ProprietaryApplicationWhereInput
  none: ProprietaryApplicationWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  icon: OrderDirection
  color: OrderDirection
  createdAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  description: String
  icon: String
  color: String
  createdAt: DateTime
  proprietaryApplications: ProprietaryApplicationRelateToManyForUpdateInput
}

input ProprietaryApplicationRelateToManyForUpdateInput {
  disconnect: [ProprietaryApplicationWhereUniqueInput!]
  set: [ProprietaryApplicationWhereUniqueInput!]
  create: [ProprietaryApplicationCreateInput!]
  connect: [ProprietaryApplicationWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  description: String
  icon: String
  color: String
  createdAt: DateTime
  proprietaryApplications: ProprietaryApplicationRelateToManyForCreateInput
}

input ProprietaryApplicationRelateToManyForCreateInput {
  create: [ProprietaryApplicationCreateInput!]
  connect: [ProprietaryApplicationWhereUniqueInput!]
}

type ProprietaryApplication {
  id: ID!
  name: String
  slug: String
  description: String
  websiteUrl: String
  simpleIconSlug: String
  simpleIconColor: String
  category: Category
  capabilities(where: ProprietaryCapabilityWhereInput! = {}, orderBy: [ProprietaryCapabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProprietaryCapabilityWhereUniqueInput): [ProprietaryCapability!]
  capabilitiesCount(where: ProprietaryCapabilityWhereInput! = {}): Int
  openSourceAlternatives(where: OpenSourceApplicationWhereInput! = {}, orderBy: [OpenSourceApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OpenSourceApplicationWhereUniqueInput): [OpenSourceApplication!]
  openSourceAlternativesCount(where: OpenSourceApplicationWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProprietaryApplicationWhereUniqueInput {
  id: ID
  slug: String
}

input ProprietaryApplicationWhereInput {
  AND: [ProprietaryApplicationWhereInput!]
  OR: [ProprietaryApplicationWhereInput!]
  NOT: [ProprietaryApplicationWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  websiteUrl: StringFilter
  simpleIconSlug: StringFilter
  simpleIconColor: StringFilter
  category: CategoryWhereInput
  capabilities: ProprietaryCapabilityManyRelationFilter
  openSourceAlternatives: OpenSourceApplicationManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProprietaryCapabilityManyRelationFilter {
  every: ProprietaryCapabilityWhereInput
  some: ProprietaryCapabilityWhereInput
  none: ProprietaryCapabilityWhereInput
}

input OpenSourceApplicationManyRelationFilter {
  every: OpenSourceApplicationWhereInput
  some: OpenSourceApplicationWhereInput
  none: OpenSourceApplicationWhereInput
}

input ProprietaryApplicationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  websiteUrl: OrderDirection
  simpleIconSlug: OrderDirection
  simpleIconColor: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProprietaryApplicationUpdateInput {
  name: String
  slug: String
  description: String
  websiteUrl: String
  simpleIconSlug: String
  simpleIconColor: String
  category: CategoryRelateToOneForUpdateInput
  capabilities: ProprietaryCapabilityRelateToManyForUpdateInput
  openSourceAlternatives: OpenSourceApplicationRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ProprietaryCapabilityRelateToManyForUpdateInput {
  disconnect: [ProprietaryCapabilityWhereUniqueInput!]
  set: [ProprietaryCapabilityWhereUniqueInput!]
  create: [ProprietaryCapabilityCreateInput!]
  connect: [ProprietaryCapabilityWhereUniqueInput!]
}

input OpenSourceApplicationRelateToManyForUpdateInput {
  disconnect: [OpenSourceApplicationWhereUniqueInput!]
  set: [OpenSourceApplicationWhereUniqueInput!]
  create: [OpenSourceApplicationCreateInput!]
  connect: [OpenSourceApplicationWhereUniqueInput!]
}

input ProprietaryApplicationUpdateArgs {
  where: ProprietaryApplicationWhereUniqueInput!
  data: ProprietaryApplicationUpdateInput!
}

input ProprietaryApplicationCreateInput {
  name: String
  slug: String
  description: String
  websiteUrl: String
  simpleIconSlug: String
  simpleIconColor: String
  category: CategoryRelateToOneForCreateInput
  capabilities: ProprietaryCapabilityRelateToManyForCreateInput
  openSourceAlternatives: OpenSourceApplicationRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input ProprietaryCapabilityRelateToManyForCreateInput {
  create: [ProprietaryCapabilityCreateInput!]
  connect: [ProprietaryCapabilityWhereUniqueInput!]
}

input OpenSourceApplicationRelateToManyForCreateInput {
  create: [OpenSourceApplicationCreateInput!]
  connect: [OpenSourceApplicationWhereUniqueInput!]
}

type OpenSourceApplication {
  id: ID!
  name: String
  slug: String
  description: String
  primaryAlternativeTo: ProprietaryApplication
  repositoryUrl: String
  websiteUrl: String
  simpleIconSlug: String
  simpleIconColor: String
  license: String
  githubStars: Int
  githubForks: Int
  githubIssues: Int
  githubLastCommit: DateTime
  status: String
  capabilities(where: OpenSourceCapabilityWhereInput! = {}, orderBy: [OpenSourceCapabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OpenSourceCapabilityWhereUniqueInput): [OpenSourceCapability!]
  capabilitiesCount(where: OpenSourceCapabilityWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input OpenSourceApplicationWhereUniqueInput {
  id: ID
  slug: String
}

input OpenSourceApplicationWhereInput {
  AND: [OpenSourceApplicationWhereInput!]
  OR: [OpenSourceApplicationWhereInput!]
  NOT: [OpenSourceApplicationWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  primaryAlternativeTo: ProprietaryApplicationWhereInput
  repositoryUrl: StringFilter
  websiteUrl: StringFilter
  simpleIconSlug: StringFilter
  simpleIconColor: StringFilter
  license: StringFilter
  githubStars: IntNullableFilter
  githubForks: IntNullableFilter
  githubIssues: IntNullableFilter
  githubLastCommit: DateTimeNullableFilter
  status: StringNullableFilter
  capabilities: OpenSourceCapabilityManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input OpenSourceCapabilityManyRelationFilter {
  every: OpenSourceCapabilityWhereInput
  some: OpenSourceCapabilityWhereInput
  none: OpenSourceCapabilityWhereInput
}

input OpenSourceApplicationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  repositoryUrl: OrderDirection
  websiteUrl: OrderDirection
  simpleIconSlug: OrderDirection
  simpleIconColor: OrderDirection
  license: OrderDirection
  githubStars: OrderDirection
  githubForks: OrderDirection
  githubIssues: OrderDirection
  githubLastCommit: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OpenSourceApplicationUpdateInput {
  name: String
  slug: String
  description: String
  primaryAlternativeTo: ProprietaryApplicationRelateToOneForUpdateInput
  repositoryUrl: String
  websiteUrl: String
  simpleIconSlug: String
  simpleIconColor: String
  license: String
  githubStars: Int
  githubForks: Int
  githubIssues: Int
  githubLastCommit: DateTime
  status: String
  capabilities: OpenSourceCapabilityRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProprietaryApplicationRelateToOneForUpdateInput {
  create: ProprietaryApplicationCreateInput
  connect: ProprietaryApplicationWhereUniqueInput
  disconnect: Boolean
}

input OpenSourceCapabilityRelateToManyForUpdateInput {
  disconnect: [OpenSourceCapabilityWhereUniqueInput!]
  set: [OpenSourceCapabilityWhereUniqueInput!]
  create: [OpenSourceCapabilityCreateInput!]
  connect: [OpenSourceCapabilityWhereUniqueInput!]
}

input OpenSourceApplicationUpdateArgs {
  where: OpenSourceApplicationWhereUniqueInput!
  data: OpenSourceApplicationUpdateInput!
}

input OpenSourceApplicationCreateInput {
  name: String
  slug: String
  description: String
  primaryAlternativeTo: ProprietaryApplicationRelateToOneForCreateInput
  repositoryUrl: String
  websiteUrl: String
  simpleIconSlug: String
  simpleIconColor: String
  license: String
  githubStars: Int
  githubForks: Int
  githubIssues: Int
  githubLastCommit: DateTime
  status: String
  capabilities: OpenSourceCapabilityRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProprietaryApplicationRelateToOneForCreateInput {
  create: ProprietaryApplicationCreateInput
  connect: ProprietaryApplicationWhereUniqueInput
}

input OpenSourceCapabilityRelateToManyForCreateInput {
  create: [OpenSourceCapabilityCreateInput!]
  connect: [OpenSourceCapabilityWhereUniqueInput!]
}

type Capability {
  id: ID!
  name: String
  slug: String
  description: String
  category: String
  complexity: String
  proprietaryApplications(where: ProprietaryCapabilityWhereInput! = {}, orderBy: [ProprietaryCapabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProprietaryCapabilityWhereUniqueInput): [ProprietaryCapability!]
  proprietaryApplicationsCount(where: ProprietaryCapabilityWhereInput! = {}): Int
  openSourceApplications(where: OpenSourceCapabilityWhereInput! = {}, orderBy: [OpenSourceCapabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OpenSourceCapabilityWhereUniqueInput): [OpenSourceCapability!]
  openSourceApplicationsCount(where: OpenSourceCapabilityWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CapabilityWhereUniqueInput {
  id: ID
  slug: String
}

input CapabilityWhereInput {
  AND: [CapabilityWhereInput!]
  OR: [CapabilityWhereInput!]
  NOT: [CapabilityWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  category: StringNullableFilter
  complexity: StringNullableFilter
  proprietaryApplications: ProprietaryCapabilityManyRelationFilter
  openSourceApplications: OpenSourceCapabilityManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CapabilityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  category: OrderDirection
  complexity: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CapabilityUpdateInput {
  name: String
  slug: String
  description: String
  category: String
  complexity: String
  proprietaryApplications: ProprietaryCapabilityRelateToManyForUpdateInput
  openSourceApplications: OpenSourceCapabilityRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CapabilityUpdateArgs {
  where: CapabilityWhereUniqueInput!
  data: CapabilityUpdateInput!
}

input CapabilityCreateInput {
  name: String
  slug: String
  description: String
  category: String
  complexity: String
  proprietaryApplications: ProprietaryCapabilityRelateToManyForCreateInput
  openSourceApplications: OpenSourceCapabilityRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type ProprietaryCapability {
  id: ID!
  proprietaryApplication: ProprietaryApplication
  capability: Capability
  isActive: Boolean
  createdAt: DateTime
}

input ProprietaryCapabilityWhereUniqueInput {
  id: ID
}

input ProprietaryCapabilityWhereInput {
  AND: [ProprietaryCapabilityWhereInput!]
  OR: [ProprietaryCapabilityWhereInput!]
  NOT: [ProprietaryCapabilityWhereInput!]
  id: IDFilter
  proprietaryApplication: ProprietaryApplicationWhereInput
  capability: CapabilityWhereInput
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input ProprietaryCapabilityOrderByInput {
  id: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
}

input ProprietaryCapabilityUpdateInput {
  proprietaryApplication: ProprietaryApplicationRelateToOneForUpdateInput
  capability: CapabilityRelateToOneForUpdateInput
  isActive: Boolean
  createdAt: DateTime
}

input CapabilityRelateToOneForUpdateInput {
  create: CapabilityCreateInput
  connect: CapabilityWhereUniqueInput
  disconnect: Boolean
}

input ProprietaryCapabilityUpdateArgs {
  where: ProprietaryCapabilityWhereUniqueInput!
  data: ProprietaryCapabilityUpdateInput!
}

input ProprietaryCapabilityCreateInput {
  proprietaryApplication: ProprietaryApplicationRelateToOneForCreateInput
  capability: CapabilityRelateToOneForCreateInput
  isActive: Boolean
  createdAt: DateTime
}

input CapabilityRelateToOneForCreateInput {
  create: CapabilityCreateInput
  connect: CapabilityWhereUniqueInput
}

type OpenSourceCapability {
  id: ID!
  openSourceApplication: OpenSourceApplication
  capability: Capability
  isActive: Boolean
  implementationNotes: String
  githubPath: String
  documentationUrl: String
  implementationComplexity: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OpenSourceCapabilityWhereUniqueInput {
  id: ID
}

input OpenSourceCapabilityWhereInput {
  AND: [OpenSourceCapabilityWhereInput!]
  OR: [OpenSourceCapabilityWhereInput!]
  NOT: [OpenSourceCapabilityWhereInput!]
  id: IDFilter
  openSourceApplication: OpenSourceApplicationWhereInput
  capability: CapabilityWhereInput
  isActive: BooleanFilter
  implementationNotes: StringFilter
  githubPath: StringFilter
  documentationUrl: StringFilter
  implementationComplexity: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input OpenSourceCapabilityOrderByInput {
  id: OrderDirection
  isActive: OrderDirection
  implementationNotes: OrderDirection
  githubPath: OrderDirection
  documentationUrl: OrderDirection
  implementationComplexity: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OpenSourceCapabilityUpdateInput {
  openSourceApplication: OpenSourceApplicationRelateToOneForUpdateInput
  capability: CapabilityRelateToOneForUpdateInput
  isActive: Boolean
  implementationNotes: String
  githubPath: String
  documentationUrl: String
  implementationComplexity: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OpenSourceApplicationRelateToOneForUpdateInput {
  create: OpenSourceApplicationCreateInput
  connect: OpenSourceApplicationWhereUniqueInput
  disconnect: Boolean
}

input OpenSourceCapabilityUpdateArgs {
  where: OpenSourceCapabilityWhereUniqueInput!
  data: OpenSourceCapabilityUpdateInput!
}

input OpenSourceCapabilityCreateInput {
  openSourceApplication: OpenSourceApplicationRelateToOneForCreateInput
  capability: CapabilityRelateToOneForCreateInput
  isActive: Boolean
  implementationNotes: String
  githubPath: String
  documentationUrl: String
  implementationComplexity: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OpenSourceApplicationRelateToOneForCreateInput {
  create: OpenSourceApplicationCreateInput
  connect: OpenSourceApplicationWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createProprietaryApplication(data: ProprietaryApplicationCreateInput!): ProprietaryApplication
  createProprietaryApplications(data: [ProprietaryApplicationCreateInput!]!): [ProprietaryApplication]
  updateProprietaryApplication(where: ProprietaryApplicationWhereUniqueInput!, data: ProprietaryApplicationUpdateInput!): ProprietaryApplication
  updateProprietaryApplications(data: [ProprietaryApplicationUpdateArgs!]!): [ProprietaryApplication]
  deleteProprietaryApplication(where: ProprietaryApplicationWhereUniqueInput!): ProprietaryApplication
  deleteProprietaryApplications(where: [ProprietaryApplicationWhereUniqueInput!]!): [ProprietaryApplication]
  createOpenSourceApplication(data: OpenSourceApplicationCreateInput!): OpenSourceApplication
  createOpenSourceApplications(data: [OpenSourceApplicationCreateInput!]!): [OpenSourceApplication]
  updateOpenSourceApplication(where: OpenSourceApplicationWhereUniqueInput!, data: OpenSourceApplicationUpdateInput!): OpenSourceApplication
  updateOpenSourceApplications(data: [OpenSourceApplicationUpdateArgs!]!): [OpenSourceApplication]
  deleteOpenSourceApplication(where: OpenSourceApplicationWhereUniqueInput!): OpenSourceApplication
  deleteOpenSourceApplications(where: [OpenSourceApplicationWhereUniqueInput!]!): [OpenSourceApplication]
  createCapability(data: CapabilityCreateInput!): Capability
  createCapabilities(data: [CapabilityCreateInput!]!): [Capability]
  updateCapability(where: CapabilityWhereUniqueInput!, data: CapabilityUpdateInput!): Capability
  updateCapabilities(data: [CapabilityUpdateArgs!]!): [Capability]
  deleteCapability(where: CapabilityWhereUniqueInput!): Capability
  deleteCapabilities(where: [CapabilityWhereUniqueInput!]!): [Capability]
  createProprietaryCapability(data: ProprietaryCapabilityCreateInput!): ProprietaryCapability
  createProprietaryCapabilities(data: [ProprietaryCapabilityCreateInput!]!): [ProprietaryCapability]
  updateProprietaryCapability(where: ProprietaryCapabilityWhereUniqueInput!, data: ProprietaryCapabilityUpdateInput!): ProprietaryCapability
  updateProprietaryCapabilities(data: [ProprietaryCapabilityUpdateArgs!]!): [ProprietaryCapability]
  deleteProprietaryCapability(where: ProprietaryCapabilityWhereUniqueInput!): ProprietaryCapability
  deleteProprietaryCapabilities(where: [ProprietaryCapabilityWhereUniqueInput!]!): [ProprietaryCapability]
  createOpenSourceCapability(data: OpenSourceCapabilityCreateInput!): OpenSourceCapability
  createOpenSourceCapabilities(data: [OpenSourceCapabilityCreateInput!]!): [OpenSourceCapability]
  updateOpenSourceCapability(where: OpenSourceCapabilityWhereUniqueInput!, data: OpenSourceCapabilityUpdateInput!): OpenSourceCapability
  updateOpenSourceCapabilities(data: [OpenSourceCapabilityUpdateArgs!]!): [OpenSourceCapability]
  deleteOpenSourceCapability(where: OpenSourceCapabilityWhereUniqueInput!): OpenSourceCapability
  deleteOpenSourceCapabilities(where: [OpenSourceCapabilityWhereUniqueInput!]!): [OpenSourceCapability]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  proprietaryApplication(where: ProprietaryApplicationWhereUniqueInput!): ProprietaryApplication
  proprietaryApplications(where: ProprietaryApplicationWhereInput! = {}, orderBy: [ProprietaryApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProprietaryApplicationWhereUniqueInput): [ProprietaryApplication!]
  proprietaryApplicationsCount(where: ProprietaryApplicationWhereInput! = {}): Int
  openSourceApplication(where: OpenSourceApplicationWhereUniqueInput!): OpenSourceApplication
  openSourceApplications(where: OpenSourceApplicationWhereInput! = {}, orderBy: [OpenSourceApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OpenSourceApplicationWhereUniqueInput): [OpenSourceApplication!]
  openSourceApplicationsCount(where: OpenSourceApplicationWhereInput! = {}): Int
  capability(where: CapabilityWhereUniqueInput!): Capability
  capabilities(where: CapabilityWhereInput! = {}, orderBy: [CapabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CapabilityWhereUniqueInput): [Capability!]
  capabilitiesCount(where: CapabilityWhereInput! = {}): Int
  proprietaryCapability(where: ProprietaryCapabilityWhereUniqueInput!): ProprietaryCapability
  proprietaryCapabilities(where: ProprietaryCapabilityWhereInput! = {}, orderBy: [ProprietaryCapabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProprietaryCapabilityWhereUniqueInput): [ProprietaryCapability!]
  proprietaryCapabilitiesCount(where: ProprietaryCapabilityWhereInput! = {}): Int
  openSourceCapability(where: OpenSourceCapabilityWhereUniqueInput!): OpenSourceCapability
  openSourceCapabilities(where: OpenSourceCapabilityWhereInput! = {}, orderBy: [OpenSourceCapabilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OpenSourceCapabilityWhereUniqueInput): [OpenSourceCapability!]
  openSourceCapabilitiesCount(where: OpenSourceCapabilityWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
  redirectToInit: Boolean
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
